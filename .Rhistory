## Obtain initial parameters with linear regression
linear_model_2 = lm(log(degree_2nd_moment)~log(vertices), mean_lang)
a_initial = exp(coef(linear_model_2)[1])
b_initial = coef(linear_model_2)[2]
## Perform nonlinear regression
nonlinear_model_2 = nls(degree_2nd_moment~a*vertices^b,data=mean_lang,
start = list(a = a_initial, b = b_initial), trace = FALSE)
## Get AIC, RSS and obtained coefficients
s_2 <- sqrt(deviance(nonlinear_model_2)/df.residual(nonlinear_model_2))
AIC_2 <- AIC(nonlinear_model_2)
a_2 <- coef(nonlinear_model_2)["a"]
b_2 <- coef(nonlinear_model_2)["b"]
# MODEL 2+
## Perform nonlinear regression
# Here we use the previous initial a,b obtained with linear regression and a
# random starting value for d
d_initial <- 0
model_2plus = nls(degree_2nd_moment~a*(vertices)^b + d, data=mean_lang,
start = list(a = a_initial, b = b_initial, d = d_initial),
control = list(maxiter=1000),
algorithm = 'port',
lower=c(0,0,-20),
upper=c(20,5,20))
## Get AIC, RSS and obtained coefficients
a_2p <- coef(model_2plus)["a"]
b_2p <- coef(model_2plus)["b"]
d_2p <- coef(model_2plus)["d"]
s_2p <- sqrt(deviance(model_2plus)/df.residual(model_2plus))
AIC_2p <- AIC(model_2plus)
# MODEL 3
## Obtain initial parameters with linear regression
linear_model_3 = lm(log(degree_2nd_moment)~vertices, mean_lang)
a_initial = exp(coef(linear_model_3)[1])
c_initial = coef(linear_model_3)[2]
## Perform nonlinear regression
nonlinear_model_3 = nls(degree_2nd_moment~a*exp(c*vertices),data=mean_lang,
start = list(a = a_initial, c= c_initial), trace = FALSE)
## Get AIC, RSS and obtained coefficients
s_3 <- sqrt(deviance(nonlinear_model_3)/df.residual(nonlinear_model_3))
AIC_3 <- AIC(nonlinear_model_3)
a_3 <- coef(nonlinear_model_3)["a"]
c_3 <- coef(nonlinear_model_3)["c"]
# MODEL 3+
## Perform nonlinear regression
d_initial <- 0
nonlinear_model_3p = nls(degree_2nd_moment~a*exp(c*vertices)+d,data=mean_lang,
start = list(a = a_initial, c= c_initial,
d = d_initial),
trace = FALSE,
control = list(maxiter=1000),
algorithm = 'port',
lower=c(0,0,-20)
)
## Get AIC, RSS and obtained coefficients
s_3p <- sqrt(deviance(nonlinear_model_3p)/df.residual(nonlinear_model_3p))
AIC_3p <- AIC(nonlinear_model_3p)
a_3p <- coef(nonlinear_model_3p)["a"]
c_3p <- coef(nonlinear_model_3p)["c"]
d_3p <- coef(nonlinear_model_3p)["d"]
# MODEL 4
## Obtain initial parameters with linear regression
linear_model_4 = lm(log(degree_2nd_moment)~log(vertices), mean_lang)
a_initial = coef(linear_model_4)[1]
## Perform nonlinear regression
nonlinear_model_4 = nls(degree_2nd_moment~a*log(vertices),
data=mean_lang,
start = list(a = a_initial),
trace = FALSE)
## Get AIC, RSS and obtained coefficients
s_4 <- sqrt(deviance(nonlinear_model_4)/df.residual(nonlinear_model_4))
AIC_4 <- AIC(nonlinear_model_4)
a_4 <- coef(nonlinear_model_4)["a"]
# MODEL 4+
d_initial <- 0
## Perform nonlinear regression
nonlinear_model_4p = nls(degree_2nd_moment~a*log(vertices) + d,
data=mean_lang,
start = list(a = a_initial, d=d_initial),
trace = FALSE)
## Get AIC, RSS and obtained coefficients
s_4p <- sqrt(deviance(nonlinear_model_4p)/df.residual(nonlinear_model_4p))
AIC_4p <- AIC(nonlinear_model_4p)
a_4p <- coef(nonlinear_model_4p)["a"]
d_4p <- coef(nonlinear_model_4p)["d"]
# Build final results vectors
coefs <- c(language,
round(b_1,3),
round(a_2,3), round(b_2,3),
round(a_3,3), round(c_3,3),
round(a_4,3),
round(b_1p,3), round(d_1p,3),
round(a_2p,3), round(b_2p,3), round(d_2p,3),
round(a_3p,3), round(c_3p,3), round(d_3p,3),
round(a_4p,3), round(d_4p,3))
aics <- c(language, round(AIC_0,3), round(AIC_1,3), round(AIC_2,3), round(AIC_3,3), round(AIC_4,3),
round(AIC_1p,3), round(AIC_2p,3), round(AIC_3p,3), round(AIC_4p,3))
best_aic <- min(c(AIC_0, AIC_1, AIC_2, AIC_3, AIC_4,
AIC_1p, AIC_2p, AIC_3p, AIC_4p))
aics_diff <- c(language, round(abs(AIC_0-best_aic),3),
round(abs(AIC_1-best_aic),3),
round(abs(AIC_2-best_aic),3),
round(abs(AIC_3-best_aic),3),
round(abs(AIC_4-best_aic),3),
round(abs(AIC_1p-best_aic),3),
round(abs(AIC_2p-best_aic),3),
round(abs(AIC_3p-best_aic),3),
round(abs(AIC_4p-best_aic),3))
std_error <- c(language, round(s_0,3), round(s_1,3), round(s_2,3), round(s_3,3), round(s_4,3),
round(s_1p,3), round(s_2p,3), round(s_3p,3), round(s_4p,3))
return(list("coefficients" = coefs ,"aics"=aics ,"aics_diff" = aics_diff,
"std_error" = std_error))
}
# Initialize constants
languages <- c("Arabic", "Basque", "Catalan", "Chinese", "Czech", "English", "Greek", "Hungarian", "Italian", "Turkish")
# Initialize dataframes
coefficients_df <- data.frame(matrix(ncol = 17, nrow = 0))
coefficients_df_names <- c('Language', '1: b', '2: a', '2: b', '3: a',
'3: c', '4: a', '1+: b', '1+: d', '2+: a',
'2+: b', '2+: d', '3+: a', '3+: c', '3+: d',
'4+: a', '4+: d')
colnames(coefficients_df) <- coefficients_df_names
residual_err_df <- data.frame(matrix(ncol = 10, nrow = 0))
residual_err_df_names <- c('Language', '0', '1', '2', '3', '4', '1+',
'2+', '3+', '4+')
colnames(residual_err_df) <- residual_err_df_names
aic_df <- data.frame(matrix(ncol = 10, nrow = 0))
aic_df_names <- c('Language', '0', '1', '2', '3', '4', '1+',
'2+', '3+', '4+')
colnames(aic_df) <- aic_df_names
aic_diff_df <- data.frame(matrix(ncol = 10, nrow = 0))
aic_diff_df_names <- c('Language', '0', '1', '2', '3', '4', '1+',
'2+', '3+', '4+')
colnames(aic_diff_df) <- aic_diff_df_names
# Show summary
summary_table <- langs_summary(languages)
# Show model fitting results
for (language in languages){
lang_data <- ensemble_of_models(language)
# Add models params to df
language_coeffs_df = data.frame(t(unlist(lang_data$coefficients)))
names(language_coeffs_df) = coefficients_df_names
coefficients_df <- rbind(coefficients_df,language_coeffs_df)
# Add models residual errors to df
lang_err_df = data.frame(t(unlist(lang_data$std_error)))
names(lang_err_df) = residual_err_df_names
residual_err_df <- rbind(residual_err_df,lang_err_df)
# Add models AIC to df
lang_aic_df = data.frame(t(unlist(lang_data$aics)))
names(lang_aic_df) = aic_df_names
aic_df <- rbind(aic_df,lang_aic_df)
# Add models AIC diff to df
lang_aic_diff_df = data.frame(t(unlist(lang_data$aics_diff)))
names(lang_aic_diff_df) = aic_diff_df_names
aic_diff_df <- rbind(aic_diff_df,lang_aic_diff_df)
}
coefficients_df[,-1] <- sapply(coefficients_df[,-1], as.numeric)
residual_err_df[,-1] <- sapply(residual_err_df[,-1], as.numeric)
aic_df[,-1] <- sapply(aic_df[,-1], as.numeric)
aic_diff_df[,-1] <- sapply(aic_diff_df[,-1], as.numeric)
df <- coefficients_df_screen[,-1]-coefficients_df[,-1]
xtable(df, digits=3)
df <- residual_err_df_screen[,-1]-residual_err_df[,-1]
xtable(df, digits=3)
df <- aic_df_screen[,-1]-aic_df[,-1]
xtable(df, digits=3)
source("funs.R")
robust_sd <- get_coeff_sd(robust=TRUE)
sd <- get_coeff_sd(robust=FALSE)
sd_data <- cbind(languages, coefficients_df_screen[,16:17],robust_sd,sd)
colnames(sd_data) <- c("language","4+: a","4+: d","robust_sd_a","robust_sd_d","sd_a","sd_d")
colors <- c("Robust sd" = "Red", "sd" = "Orange")
setEPS()
postscript(paste("robust_sd.eps",sep='_'),width = 7, height = 3.5)
ggplot(sd_data) +
geom_bar( aes(x=language, y=`4+: a`), stat="identity", fill="skyblue", alpha=1) +
geom_errorbar( aes(x=language, ymin=`4+: a`- robust_sd_a, ymax=`4+: a`+robust_sd_d, colour="Robust sd"),
width=0.6,  alpha=1,size=1) +
geom_errorbar( aes(x=language, ymin=`4+: a`-sd_a, ymax=`4+: a`+sd_a, colour="sd"), width=0.6, alpha=1, size=1) +
labs(color = "Legend") +
scale_color_manual(values = colors)
dev.off()
source("funs.R")
robust_sd <- get_coeff_sd(robust=TRUE)
sd <- get_coeff_sd(robust=FALSE)
sd_data <- cbind(languages, coefficients_df_screen[,16:17],robust_sd,sd)
colnames(sd_data) <- c("language","4+: a","4+: d","robust_sd_a","robust_sd_d","sd_a","sd_d")
robust_sd
source("funs.R")
robust_sd <- get_coeff_sd(robust=TRUE)
sd <- get_coeff_sd(robust=FALSE)
sd_data <- cbind(languages, coefficients_df_screen[,16:17],robust_sd,sd)
colnames(sd_data) <- c("language","4+: a","4+: d","robust_sd_a","robust_sd_d","sd_a","sd_d")
colors <- c("Robust sd" = "Red", "sd" = "Orange")
setEPS()
postscript(paste("robust_sd.eps",sep='_'),width = 7, height = 3.5)
ggplot(sd_data) +
geom_bar( aes(x=language, y=`4+: a`), stat="identity", fill="skyblue", alpha=1) +
geom_errorbar( aes(x=language, ymin=`4+: a`- robust_sd_a, ymax=`4+: a`+robust_sd_a, colour="Robust sd"),
width=0.6,  alpha=1, size=1) +
geom_errorbar( aes(x=language, ymin=`4+: a`-sd_a, ymax=`4+: a`+sd_a, colour="sd"), width=0.6, alpha=1, size=1) +
labs(color = "Legend") +
scale_color_manual(values = colors)
dev.off()
ggplot(sd_data) +
geom_bar( aes(x=language, y=`4+: a`), stat="identity", fill="skyblue", alpha=1) +
geom_errorbar( aes(x=language, ymin=`4+: a`- robust_sd_a, ymax=`4+: a`+robust_sd_a, colour="Robust sd"),
width=0.6,  alpha=1, size=1) +
geom_errorbar( aes(x=language, ymin=`4+: a`-sd_a, ymax=`4+: a`+sd_a, colour="sd"), width=0.6, alpha=1, size=1) +
labs(color = "Legend") +
scale_color_manual(values = colors)
setEPS()
postscript(paste("robust_sd.eps",sep='_'),width = 7, height = 3.5)
ggplot(sd_data) +
geom_bar( aes(x=language, y=`4+: a`), stat="identity", fill="skyblue", alpha=1) +
geom_errorbar( aes(x=language, ymin=`4+: a`- robust_sd_a, ymax=`4+: a`+robust_sd_a, colour="Robust sd"),
width=0.6,  alpha=1, size=1) +
geom_errorbar( aes(x=language, ymin=`4+: a`-sd_a, ymax=`4+: a`+sd_a, colour="sd"), width=0.6, alpha=1, size=1) +
labs(color = "Legend") +
scale_color_manual(values = colors)
dev.off()
source("funs.R")
robust_sd <- get_coeff_sd(robust=TRUE)
robust_sd
source("funs.R")
robust_sd <- get_coeff_sd(robust=TRUE)
robust_sd
sd <- get_coeff_sd(robust=FALSE)
sd_data <- cbind(languages, coefficients_df_screen[,16:17],robust_sd,sd)
sd_data
robust_sd <- get_coeff_sd(robust=TRUE)
sd <- get_coeff_sd(robust=FALSE)
sd_data <- cbind(languages, coefficients_df_screen[,14],robust_sd,sd)
sd_data
colnames(sd_data) <- c("language","3+: c","robust_sd_c","sd_c")
colors <- c("Robust sd" = "Red", "sd" = "Orange")
ggplot(sd_data) +
geom_bar( aes(x=language, y=`3+: c`), stat="identity", fill="skyblue", alpha=1) +
geom_errorbar( aes(x=language, ymin=`3+: c`- robust_sd_c, ymax=`3+: c`+robust_sd_c, colour="Robust sd"),
width=0.6,  alpha=1, size=1) +
geom_errorbar( aes(x=language, ymin=`3+: c`-sd_c, ymax=`3+: c`+sd_c, colour="sd"), width=0.6, alpha=1, size=1) +
labs(color = "Legend") +
scale_color_manual(values = colors)
robust_half_CI <- get_coeff_CI(robust=TRUE)
source("funs.R")
robust_half_CI <- get_coeff_CI(robust=TRUE)
half_CI <- get_coeff_CI(robust=FALSE)
CI_data <- cbind(languages, coefficients_df_screen[,14],robust_half_CI,half_CI)
colnames(CI_data) <- c("language","3+: c","robust_half_CI_c","half_CI_c")
colors <- c("Robust sd" = "Red", "sd" = "Orange")
ggplot(CI_data) +
geom_bar( aes(x=language, y=`3+: c`), stat="identity", fill="skyblue", alpha=1) +
geom_errorbar( aes(x=language, ymin=`3+: c`- robust_half_CI_c, ymax=`3+: c`+robust_half_CI_c, colour="Robust sd"),
width=0.6,  alpha=1, size=1) +
geom_errorbar( aes(x=language, ymin=`3+: c`-half_CI_c, ymax=`3+: c`+half_CI_c, colour="sd"), width=0.6, alpha=1, size=1) +
labs(color = "Legend") +
scale_color_manual(values = colors)
ggplot(CI_data) +
geom_bar( aes(x=language, y=`3+: c`), stat="identity", fill="skyblue", alpha=1) +
geom_errorbar( aes(x=language, ymin=`3+: c`- robust_half_CI_c, ymax=`3+: c`+robust_half_CI_c, colour="Robust sd"),
width=0.6,  alpha=1, size=1) +
geom_errorbar( aes(x=language, ymin=`3+: c`-half_CI_c, ymax=`3+: c`+half_CI_c, colour="sd"), width=0.6, alpha=1, size=1) +
labs(color = "Legend") +
scale_color_manual(values = colors) +
ylim(-0.020,0.020)
source("funs.R")
robust_half_CI <- get_coeff_CI(robust=TRUE)
half_CI <- get_coeff_CI(robust=FALSE)
CI_data <- cbind(languages, coefficients_df_screen[,14],robust_half_CI,half_CI)
colnames(CI_data) <- c("language","3+: c","robust_half_CI_c","half_CI_c")
colors <- c("Robust sd" = "Red", "sd" = "Orange")
setEPS()
postscript(paste("robust_sd.eps",sep='_'),width = 7, height = 3.5)
ggplot(CI_data) +
geom_bar( aes(x=language, y=`3+: c`), stat="identity", fill="skyblue", alpha=1) +
geom_errorbar( aes(x=language, ymin=`3+: c`- robust_half_CI_c, ymax=`3+: c`+robust_half_CI_c, colour="Robust sd"),
width=0.6,  alpha=1, size=1) +
geom_errorbar( aes(x=language, ymin=`3+: c`-half_CI_c, ymax=`3+: c`+half_CI_c, colour="sd"), width=0.6, alpha=1, size=1) +
labs(color = "Legend") +
scale_color_manual(values = colors) +
ylim(-0.020,0.020)
dev.off()
source("funs.R")
robust_half_CI <- get_coeff_CI(robust=TRUE)
half_CI <- get_coeff_CI(robust=FALSE)
CI_data <- cbind(languages, coefficients_df_screen[,14],robust_half_CI,half_CI)
colnames(CI_data) <- c("language","3+: c","robust_half_CI_c","half_CI_c")
colors <- c("Robust CI" = "Red", "CI" = "Orange")
setEPS()
postscript(paste("robust_sd.eps",sep='_'),width = 7, height = 3.5)
ggplot(CI_data) +
geom_bar( aes(x=language, y=`3+: c`), stat="identity", fill="skyblue", alpha=1) +
geom_errorbar( aes(x=language, ymin=`3+: c`- robust_half_CI_c, ymax=`3+: c`+robust_half_CI_c, colour="Robust CI"),
width=0.6,  alpha=1, size=1) +
geom_errorbar( aes(x=language, ymin=`3+: c`-half_CI_c, ymax=`3+: c`+half_CI_c, colour="CI"), width=0.6, alpha=1, size=1) +
labs(color = "Legend") +
scale_color_manual(values = colors) +
ylim(-0.020,0.020)
dev.off()
16.43/10.72
24.05/11.22
16.43/10.72
24.05/11.22
10.72/16.43
11.22/24.05
4.16-0.401
4.16+0.401
languages <- c("Arabic", "Basque", "Catalan", "Chinese", "Czech", "English", "Greek", "Hungarian", "Italian", "Turkish")
langs_4p <- c("Arabic", "Basque", "Catalan","Czech", "English", "Greek", "Hungarian", "Italian")
langs_0 <- c("Chinese","Turkish")
for (l in 1:length(languages)) {
lang <- languages[l]
data <- read_language(lang)
# remove outliers
data <- find_outliers(data,lang,remove = T)
# aggregate
mean_lang = aggregate(data, list(data$vertices), mean)
if (lang %in% langs_4p) {
model <- "4_p"
a_opt <- coefficients_df_screen$`4+: a`[coefficients_df_screen$Language==lang]
d_opt <- coefficients_df_screen$`4+: d`[coefficients_df_screen$Language==lang]
setEPS()
postscript(paste(lang,model,"screened.eps",sep='_'))
plot(mean_lang$vertices, mean_lang$degree_2nd_moment, xlab = "vertices", ylab = "degree 2nd moment")
lines(mean_lang$vertices,a_opt*log(mean_lang$vertices) + d_opt, col = "red")
lines(mean_lang$vertices,4-6/mean_lang$vertices, col = "blue")
lines(mean_lang$vertices,mean_lang$vertices-1, col = "blue")
dev.off()
}
if (lang %in% langs_0) {
model <- "0"
setEPS()
postscript(paste(lang,model,"screened.eps",sep='_'))
plot(mean_lang$vertices, mean_lang$degree_2nd_moment, xlab = "vertices", ylab = "degree 2nd moment")
lines(mean_lang$vertices,(1 - 1/mean_lang$vertices)*(5 - 6/mean_lang$vertices), col = "red")
lines(mean_lang$vertices,4-6/mean_lang$vertices, col = "blue")
lines(mean_lang$vertices,mean_lang$vertices-1, col = "blue")
dev.off()
}
}
library(dplyr)
library(xtable)
library(summarytools)
library(caret)
library("ggpubr")
require(investr)
source("funs.R")
languages <- c("Arabic", "Basque", "Catalan", "Chinese", "Czech", "English", "Greek", "Hungarian", "Italian", "Turkish")
data <- read_language("Czech")
#setEPS()
#postscript(paste("outliers.eps",sep='_'),width = 7, height = 3.5)
data <- find_outliers(data,"Czech",remove=TRUE)
#dev.off()
source("funs.R")
data <- read_language("Czech")
#setEPS()
#postscript(paste("outliers.eps",sep='_'),width = 7, height = 3.5)
data <- find_outliers(data,"Czech",remove=TRUE)
#dev.off()
plot(data$vertices, data$degree_2nd_moment, xlab = "vertices", ylab = "degree 2nd moment")
mean_data <- aggregate(data, list(data$vertices), mean)
#setEPS()
#postscript(paste("long_sentences.eps",sep='_'),width = 7, height = 3.5)
par(mfrow=c(1,2))
plot(mean_data$vertices, mean_data$degree_2nd_moment, xlab = "vertices", ylab = "degree 2nd moment")
abline(v=50, col= 'red')
boxplot(data$vertices)
abline(h=50, col= 'red')
#dev.off()
# MODEL 1
## Obtain initial parameters with linear regression
linear_model_1 = lm(log(degree_2nd_moment)~log(vertices), mean_data)
b_initial = coef(linear_model_1)[2]
## Perform nonlinear regression
nonlinear_model_1 = nls(degree_2nd_moment~(vertices/2)^b, data = mean_data,
start = list(b = b_initial), trace = FALSE)
## Get AIC, RSS and obtained coefficients
s_1 <- round(sqrt(deviance(nonlinear_model_1)/df.residual(nonlinear_model_1)),4)
AIC_1 <- round(AIC(nonlinear_model_1),4)
b_1 <- round(coef(nonlinear_model_1)["b"],4)
require(nlstools)
jack_1 <- nlsJack(nonlinear_model_1)
dfbetas <- jack_1$dfb
threshold <- 2/sqrt(nrow(mean_data))
#setEPS()
#postscript(paste("dfbetas.eps",sep='_'),width = 7, height = 3.5)
plot(mean_data$vertices, dfbetas, xlab = "vertices", ylab = "jackknife DFBETAS")
abline(h=threshold, col= 'blue')
#dev.off()
languages <- c("Arabic", "Basque", "Catalan", "Chinese", "Czech", "English", "Greek", "Hungarian", "Italian", "Turkish")
langs_4p <- c("Arabic", "Basque", "Catalan","Czech", "English", "Greek", "Hungarian", "Italian")
langs_0 <- c("Chinese","Turkish")
for (l in 1:length(languages)) {
lang <- languages[l]
data <- read_language(lang)
# remove outliers
data <- find_outliers(data,lang,remove = T)
# aggregate
mean_lang = aggregate(data, list(data$vertices), mean)
if (lang %in% langs_4p) {
model <- "4_p"
a_opt <- coefficients_df_screen$`4+: a`[coefficients_df_screen$Language==lang]
d_opt <- coefficients_df_screen$`4+: d`[coefficients_df_screen$Language==lang]
#setEPS()
#postscript(paste(lang,model,"screened.eps",sep='_'))
plot(mean_lang$vertices, mean_lang$degree_2nd_moment, xlab = "vertices", ylab = "degree 2nd moment")
lines(mean_lang$vertices,a_opt*log(mean_lang$vertices) + d_opt, col = "red")
lines(mean_lang$vertices,4-6/mean_lang$vertices, col = "blue")
lines(mean_lang$vertices,mean_lang$vertices-1, col = "blue")
#dev.off()
}
if (lang %in% langs_0) {
model <- "0"
#setEPS()
#postscript(paste(lang,model,"screened.eps",sep='_'))
plot(mean_lang$vertices, mean_lang$degree_2nd_moment, xlab = "vertices", ylab = "degree 2nd moment")
lines(mean_lang$vertices,(1 - 1/mean_lang$vertices)*(5 - 6/mean_lang$vertices), col = "red")
lines(mean_lang$vertices,4-6/mean_lang$vertices, col = "blue")
lines(mean_lang$vertices,mean_lang$vertices-1, col = "blue")
#dev.off()
}
}
source("LAB4_script.R")
languages <- c("Arabic", "Basque", "Catalan", "Chinese", "Czech", "English", "Greek", "Hungarian", "Italian", "Turkish")
langs_4p <- c("Arabic", "Basque", "Catalan","Czech", "English", "Greek", "Hungarian", "Italian")
langs_0 <- c("Chinese","Turkish")
for (l in 1:length(languages)) {
lang <- languages[l]
data <- read_language(lang)
# remove outliers
data <- find_outliers(data,lang,remove = T)
# aggregate
mean_lang = aggregate(data, list(data$vertices), mean)
if (lang %in% langs_4p) {
model <- "4_p"
a_opt <- coefficients_df_screen$`4+: a`[coefficients_df_screen$Language==lang]
d_opt <- coefficients_df_screen$`4+: d`[coefficients_df_screen$Language==lang]
#setEPS()
#postscript(paste(lang,model,"screened.eps",sep='_'))
plot(mean_lang$vertices, mean_lang$degree_2nd_moment, xlab = "vertices", ylab = "degree 2nd moment")
lines(mean_lang$vertices,a_opt*log(mean_lang$vertices) + d_opt, col = "red")
lines(mean_lang$vertices,4-6/mean_lang$vertices, col = "blue")
lines(mean_lang$vertices,mean_lang$vertices-1, col = "blue")
#dev.off()
}
if (lang %in% langs_0) {
model <- "0"
#setEPS()
#postscript(paste(lang,model,"screened.eps",sep='_'))
plot(mean_lang$vertices, mean_lang$degree_2nd_moment, xlab = "vertices", ylab = "degree 2nd moment")
lines(mean_lang$vertices,(1 - 1/mean_lang$vertices)*(5 - 6/mean_lang$vertices), col = "red")
lines(mean_lang$vertices,4-6/mean_lang$vertices, col = "blue")
lines(mean_lang$vertices,mean_lang$vertices-1, col = "blue")
#dev.off()
}
}
source("LAB4_script.R")
languages <- c("Arabic", "Basque", "Catalan", "Chinese", "Czech", "English", "Greek", "Hungarian", "Italian", "Turkish")
langs_4p <- c("Arabic", "Basque", "Catalan","Czech", "English", "Greek", "Hungarian", "Italian")
langs_0 <- c("Chinese","Turkish")
for (l in 1:length(languages)) {
lang <- languages[l]
data <- read_language(lang)
# remove outliers
data <- find_outliers(data,lang,remove = T)
# aggregate
mean_lang = aggregate(data, list(data$vertices), mean)
if (lang %in% langs_4p) {
model <- "4_p"
a_opt <- coefficients_df$`4+: a`[coefficients_df$Language==lang]
d_opt <- coefficients_df$`4+: d`[coefficients_df$Language==lang]
#setEPS()
#postscript(paste(lang,model,"screened.eps",sep='_'))
plot(mean_lang$vertices, mean_lang$degree_2nd_moment, xlab = "vertices", ylab = "degree 2nd moment")
lines(mean_lang$vertices,a_opt*log(mean_lang$vertices) + d_opt, col = "red")
lines(mean_lang$vertices,4-6/mean_lang$vertices, col = "blue")
lines(mean_lang$vertices,mean_lang$vertices-1, col = "blue")
#dev.off()
}
if (lang %in% langs_0) {
model <- "0"
#setEPS()
#postscript(paste(lang,model,"screened.eps",sep='_'))
plot(mean_lang$vertices, mean_lang$degree_2nd_moment, xlab = "vertices", ylab = "degree 2nd moment")
lines(mean_lang$vertices,(1 - 1/mean_lang$vertices)*(5 - 6/mean_lang$vertices), col = "red")
lines(mean_lang$vertices,4-6/mean_lang$vertices, col = "blue")
lines(mean_lang$vertices,mean_lang$vertices-1, col = "blue")
#dev.off()
}
}
source("funs.R")
robust_half_CI <- get_coeff_CI(robust=TRUE)
half_CI <- get_coeff_CI(robust=FALSE)
CI_data <- cbind(languages, coefficients_df_screen[,14],robust_half_CI,half_CI)
source("funs.R")
robust_half_CI <- get_coeff_CI(robust=TRUE)
half_CI <- get_coeff_CI(robust=FALSE)
CI_data <- cbind(languages, coefficients_df[,14],robust_half_CI,half_CI)
colnames(CI_data) <- c("language","3+: c","robust_half_CI_c","half_CI_c")
colors <- c("Robust CI" = "Red", "CI" = "Orange")
#setEPS()
#postscript(paste("robust_sd.eps",sep='_'),width = 7, height = 3.5)
ggplot(CI_data) +
geom_bar( aes(x=language, y=`3+: c`), stat="identity", fill="skyblue", alpha=1) +
geom_errorbar( aes(x=language, ymin=`3+: c`- robust_half_CI_c, ymax=`3+: c`+robust_half_CI_c, colour="Robust CI"),
width=0.6,  alpha=1, size=1) +
geom_errorbar( aes(x=language, ymin=`3+: c`-half_CI_c, ymax=`3+: c`+half_CI_c, colour="CI"), width=0.6, alpha=1, size=1) +
labs(color = "Legend") +
scale_color_manual(values = colors) +
ylim(-0.020,0.020)
#dev.off()
# find and remove outliers
lang_data <- find_outliers(lang_data,language,remove=TRUE)
